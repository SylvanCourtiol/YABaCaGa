.# > name="1- Full agent"
.# > keyword="Java"
.# > description="A full agent in Java"
.# > agentMode="ONE"
.# > onlyAgentDefinitionSupport="true"
.template 0

function typeToIGSType (type)
   if (type = "STRING")
       return "IGS_STRING_T"
   elsif (type = "INTEGER")
       return "IGS_INTEGER_T"
   elsif (type = "DOUBLE")
       return "IGS_DOUBLE_T"
   elsif (type = "BOOL")
       return "IGS_BOOL_T"
   elsif (type = "IMPULSION")
       return "IGS_IMPULSION_T"
   elsif (type = "DATA")
       return "IGS_DATA_T"
   endif
endfunction typeToIGSType

.endtemplate
.template 1
.ignorecase = 0
.
.####################################################################################
.echo "Creating directories structure ..."
.directory.create("src")
.if (count(definition.input) > 0 | count(definition.parameter) > 0 | count(definition.service) > 0)
.directory.create("callbacks")
.endif
.
.####################################################################################
.echo "Generating src/$(definition.name:Pascal).java ..."
.output "src/$(definition.name:Pascal).java"
import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ingescape.*;
import callbacks.*;

public class $(definition.name:Pascal) implements AgentEventListener, WebSocketEventListener {

	private static Logger _logger = LoggerFactory.getLogger($(definition.name:Pascal).class);

	public $(definition.name:Pascal)() {}

	@Override
	public void handleAgentEvent(Agent agent, AgentEvent event, String uuid, String name, Object eventData) {
		_logger.debug("**received agent event for {} ({}): {} with data {}", name, uuid, event, eventData);
	}

	@Override
	public void handleWebSocketEvent(WebSocketEvent event, Throwable t) {
		if (t != null) {
			_logger.error("**received web socket event {} with exception {}", event, t.toString());
		}
		else {
			_logger.debug("**received web socket event {}", event);
		}
	}

	public static void main(String[] args) throws InterruptedException {

        _logger.info("Start Java app '$(definition.name)'");
        _logger.info("is DEBUG enabled ? {}", _logger.isDebugEnabled());

    	Global globalContext = new Global("ws://localhost:12345");

.if (count(definition.input) > 0)
        InputCallback inputCB = new InputCallback();
.endif
.if (count(definition.parameter) > 0)
        AttributeCallback attributeCB = new AttributeCallback();
.endif
.if (count(definition.service) > 0)
        ServiceCallback serviceCB = new ServiceCallback();
.endif

    	$(definition.name:Pascal) $(definition.name:Camel) = new $(definition.name:Pascal)();
        globalContext.observeWebSocketEvents($(definition.name:Camel));

        Agent agent = globalContext.agentCreate("$(definition.name)");
		agent.observeAgentEvents($(definition.name:Camel));

.if (defined (definition.class) & string.length(definition.class))
		agent.definition.setClass("$(definition.class)");
.endif
.if (defined (definition.package) & string.length(definition.package))
		agent.definition.setPackage("$(definition.package)");
.endif
.if (defined (definition.version) & string.length(definition.version))
		agent.definition.setVersion("$(definition.version)");
.endif
.if (defined (definition->description) & string.length(definition->description))
		agent.definition.setDescription("$(definition->description)");
.endif

.for definition.input
        agent.definition.inputCreate("$(input.name)", IopType.$(typeToIGSType(input.type)));
        agent.observeInput("$(input.name)", inputCB);
.endfor
.for definition.output
        agent.definition.outputCreate("$(output.name)", IopType.$(typeToIGSType(output.type)));
.endfor
.for definition.parameter
        agent.definition.parameterCreate("$(parameter.name)", IopType.$(typeToIGSType(parameter.type)));
        agent.observeParameter("$(parameter.name)", attributeCB);
.endfor
.for service
        agent.serviceInit("$(service.name)", serviceCB);
.for argument
        agent.serviceArgAdd("$(service.name)", "$(argument.name)", IopType.$(typeToIGSType(argument.type)));
.endfor
.endfor

		agent.start();

		System.out.println("Press Enter to stop the agent");
		Scanner scanner = new Scanner(System.in);
        try {
            scanner.nextLine();
        } catch(IllegalStateException | NoSuchElementException e) {
            // System.in has been closed
            System.out.println("System.in was closed; exiting");
        }

        agent.stop();
    }
}
.
.if (count(definition.input) > 0)
.####################################################################################
.echo "Generating callbacks/InputCallback.java ..."
.output "callbacks/InputCallback.java"
package callbacks;

import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ingescape.*;

public class InputCallback implements IopListener {
private static Logger _logger = LoggerFactory.getLogger(InputCallback.class);

	public InputCallback() {}

	@Override
	public void handleIOP(Agent agent, Iop io, String name, IopType type, Object value) {
		_logger.debug("**received input {} with type {} and value {}", name, type, value);

		// Add code here if needed //

	}
}
.endif
.if (count(definition.parameter) > 0)
.####################################################################################
.echo "Generating callbacks/AttributeCallback.java ..."
.output "callbacks/AttributeCallback.java"
package callbacks;

import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ingescape.*;

public class AttributeCallback implements IopListener {
private static Logger _logger = LoggerFactory.getLogger(AttributeCallback.class);

	public AttributeCallback() {}

	@Override
	public void handleIOP(Agent agent, Iop io, String name, IopType type, Object value) {
		_logger.debug("**received input {} with type {} and value {}", name, type, value);

		// Add code here if needed //

	}
}
.endif
.if (count(definition.service) > 0)
.####################################################################################
.echo "Generating callbacks/ServiceCallback.java ..."
.output "callbacks/ServiceCallback.java"
package callbacks;

import java.io.IOException;
import java.nio.file.*;
import java.util.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ingescape.*;

public class ServiceCallback implements ServiceListener {
private static Logger _logger = LoggerFactory.getLogger(ServiceCallback.class);

	public ServiceCallback() {}

	@Override
	public void handleCallToService(Agent agent, String senderAgentName, String senderAgentUUID,
									String serviceName, List<Object> arguments, String token) {
		_logger.debug("**received service call from {} ({}): {} (with token {})", senderAgentName, senderAgentUUID, serviceName, arguments, token);

		// Add code here if needed //

	}
}
.endif
.
.####################################################################################
.echo "Creating README.md ..."
.output "README.md"
# $(definition.name)

This is the code for an Ingescape agent in Java, generated from Circle based on a class definition.
This code will show you the basic workings of an agent in Java. Default listeners to observe input values and service calls are already created.
Java agents have to connect through a Proxy using a WebSocket connection.

This code is meant to be included in a Java project in your favorite IDE.
You will have to add some dependencies. The JAR files of those dependencies can be found here: https://ingescape.com/n7/java/ingescape/libs/
You will need all of them.

You will also need the ingescape.jar dependency which can be found here: https://ingescape.com/n7/java/ingescape.jar

.endtemplate
